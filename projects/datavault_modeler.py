

# Disclaimer: The data model generated by this script may not strictly adhere to all Data Vault 2.0 rules,
# and the AI's responses might contain inaccuracies. However, this script serves to demonstrate the potential
# of generative AI models in assisting with data modeling tasks and similar use cases.

import os
import getpass

from langchain_community.agent_toolkits import create_sql_agent
from langchain_community.utilities import SQLDatabase
from langchain_openai import ChatOpenAI

class DataModeler:

    def __init__(self, db_uri: str, model: str = "gpt-4o") -> None:
        db = SQLDatabase.from_uri(db_uri)
        llm = ChatOpenAI(model=model)

        self.agent_executor = create_sql_agent(
            llm, db=db, agent_type="openai-tools", verbose=True
        )
        self.default_query = """You are an expert data modeler in Data Vault methodology.

Task:
Analyze an existing SQL database data model and design a relational data model that adheres to Data Vault 2.0 conventions.

Requirements:
- Ensure the proposed data model is consistent and as simple as possible.
- Format your response in valid Database Markup Language (DBML).

Follow these Data Vault Rules without compromise:
- Hubs represent unique business keys and should not contain any descriptive data.
- Hub tables start with the prefix "hub_".
- Each unique business entity should have its own hub.
- Satellites store descriptive attributes related to a hub or link and track historical changes.
- Satellites start with the prefix "sat_".
- Links associate two or more hubs and establish relationships; they cannot connect directly to other links.
- Links cannot connect to other link tables.
- Links start with the prefix "link_".
- Each table should include standard metadata columns like load_date and record_source.

Table Structures:
- **Hub Tables:** business_key, hash_key, load_date, record_source.
- **Satellite Tables:** hash_key, load_date, record_source, list of attributes specific to the satellite.
    Satellites should always reference the parent hub or link's hash_key.
- **Link Tables:* link_hash_key, list of business_hash_keys, load_date, record_source.
    Links should reference the hash_key of the hubs they connect, and the column names should reflect this.
    Columns that reference the hash_key of the hubs they connect should be marked as primary keys.
- Include primary key and foreign key annotations where appropriate.
    The primary key of a hub should be the surrogate key (hash_key), not the business key.
    Make hash_key the primary key and treat business_key as an attribute.
- Only include Data Vault 2.0 tables in your reply."""

    def run(self, user_query: str = None):
        if not user_query:
            user_query = self.default_query

        return self.agent_executor.run(user_query)
    

if __name__ == "__main__":
    os.environ["OPENAI_API_KEY"] = getpass.getpass()
    db_uri = "sqlite:///data/database.db"
    modeler = DataModeler(db_uri=db_uri)
    result = modeler.run()
    print(result)


# ------------------------------------------------ Example reply ------------------------------------------------ #
# Note: the model's responses might not follow Data Vault 2.0 convention or might be inconsistent with the original data model.

"""
Based on the existing SQL database schema, I will design a Data Vault 2.0 model using Database Markup Language (DBML). This model will include hubs, links, and satellites for the entities: customers, orders, products, shipments, and suppliers.

```dbml
// Hubs
Table hub_customer {
  business_key TEXT [note: 'Customer email']
  hash_key TEXT [pk, unique]
  load_date TEXT
  record_source TEXT
}

Table hub_product {
  business_key TEXT [note: 'Product name']
  hash_key TEXT [pk, unique]
  load_date TEXT
  record_source TEXT
}

Table hub_order {
  business_key TEXT [note: 'Order ID']
  hash_key TEXT [pk, unique]
  load_date TEXT
  record_source TEXT
}

Table hub_supplier {
  business_key TEXT [note: 'Supplier contact email']
  hash_key TEXT [pk, unique]
  load_date TEXT
  record_source TEXT
}

// Satellites
Table sat_customer_details {
  hash_key TEXT [ref: > hub_customer.hash_key]
  load_date TEXT
  record_source TEXT
  name TEXT
  age INTEGER
}

Table sat_product_details {
  hash_key TEXT [ref: > hub_product.hash_key]
  load_date TEXT
  record_source TEXT
  price REAL
  stock INTEGER
}

Table sat_supplier_details {
  hash_key TEXT [ref: > hub_supplier.hash_key]
  load_date TEXT
  record_source TEXT
  name TEXT
  contact_name TEXT
}

// Links
Table link_order_product {
  link_hash_key TEXT [pk, unique]
  customer_hash_key TEXT [ref: > hub_customer.hash_key]
  product_hash_key TEXT [ref: > hub_product.hash_key]
  order_hash_key TEXT [ref: > hub_order.hash_key]
  load_date TEXT
  record_source TEXT
}

Table link_shipment_order {
  link_hash_key TEXT [pk, unique]
  order_hash_key TEXT [ref: > hub_order.hash_key]
  supplier_hash_key TEXT [ref: > hub_supplier.hash_key]
  load_date TEXT
  record_source TEXT
}
```

### Explanation:
- **Hubs**: Represent unique business keys for customers (email), products (name), orders (ID), and suppliers (contact email).
- **Satellites**: Store descriptive attributes and historical changes related to the hubs.
- **Links**: Establish relationships between hubs (e.g., orders linked to products and shipments linked to orders and suppliers).

This model follows Data Vault 2.0 conventions, ensuring the separation of unique identities, relationships, and descriptive attributes.
"""